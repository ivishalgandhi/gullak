// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAssetStmt, err = db.PrepareContext(ctx, createAsset); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAsset: %w", err)
	}
	if q.createAssetHistoryStmt, err = db.PrepareContext(ctx, createAssetHistory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAssetHistory: %w", err)
	}
	if q.createTransactionStmt, err = db.PrepareContext(ctx, createTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTransaction: %w", err)
	}
	if q.dailySpendingStmt, err = db.PrepareContext(ctx, dailySpending); err != nil {
		return nil, fmt.Errorf("error preparing query DailySpending: %w", err)
	}
	if q.deleteAssetStmt, err = db.PrepareContext(ctx, deleteAsset); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAsset: %w", err)
	}
	if q.deleteTransactionStmt, err = db.PrepareContext(ctx, deleteTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTransaction: %w", err)
	}
	if q.getAssetStmt, err = db.PrepareContext(ctx, getAsset); err != nil {
		return nil, fmt.Errorf("error preparing query GetAsset: %w", err)
	}
	if q.getAssetByInstitutionStmt, err = db.PrepareContext(ctx, getAssetByInstitution); err != nil {
		return nil, fmt.Errorf("error preparing query GetAssetByInstitution: %w", err)
	}
	if q.getAssetHistoryStmt, err = db.PrepareContext(ctx, getAssetHistory); err != nil {
		return nil, fmt.Errorf("error preparing query GetAssetHistory: %w", err)
	}
	if q.getTransactionStmt, err = db.PrepareContext(ctx, getTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransaction: %w", err)
	}
	if q.listAssetsStmt, err = db.PrepareContext(ctx, listAssets); err != nil {
		return nil, fmt.Errorf("error preparing query ListAssets: %w", err)
	}
	if q.listTransactionsStmt, err = db.PrepareContext(ctx, listTransactions); err != nil {
		return nil, fmt.Errorf("error preparing query ListTransactions: %w", err)
	}
	if q.monthlySpendingSummaryStmt, err = db.PrepareContext(ctx, monthlySpendingSummary); err != nil {
		return nil, fmt.Errorf("error preparing query MonthlySpendingSummary: %w", err)
	}
	if q.topExpenseCategoriesStmt, err = db.PrepareContext(ctx, topExpenseCategories); err != nil {
		return nil, fmt.Errorf("error preparing query TopExpenseCategories: %w", err)
	}
	if q.updateAssetValueStmt, err = db.PrepareContext(ctx, updateAssetValue); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAssetValue: %w", err)
	}
	if q.updateAssetValueAndHistoryStmt, err = db.PrepareContext(ctx, updateAssetValueAndHistory); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAssetValueAndHistory: %w", err)
	}
	if q.updateTransactionStmt, err = db.PrepareContext(ctx, updateTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTransaction: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAssetStmt != nil {
		if cerr := q.createAssetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAssetStmt: %w", cerr)
		}
	}
	if q.createAssetHistoryStmt != nil {
		if cerr := q.createAssetHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAssetHistoryStmt: %w", cerr)
		}
	}
	if q.createTransactionStmt != nil {
		if cerr := q.createTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTransactionStmt: %w", cerr)
		}
	}
	if q.dailySpendingStmt != nil {
		if cerr := q.dailySpendingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing dailySpendingStmt: %w", cerr)
		}
	}
	if q.deleteAssetStmt != nil {
		if cerr := q.deleteAssetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAssetStmt: %w", cerr)
		}
	}
	if q.deleteTransactionStmt != nil {
		if cerr := q.deleteTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTransactionStmt: %w", cerr)
		}
	}
	if q.getAssetStmt != nil {
		if cerr := q.getAssetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAssetStmt: %w", cerr)
		}
	}
	if q.getAssetByInstitutionStmt != nil {
		if cerr := q.getAssetByInstitutionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAssetByInstitutionStmt: %w", cerr)
		}
	}
	if q.getAssetHistoryStmt != nil {
		if cerr := q.getAssetHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAssetHistoryStmt: %w", cerr)
		}
	}
	if q.getTransactionStmt != nil {
		if cerr := q.getTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionStmt: %w", cerr)
		}
	}
	if q.listAssetsStmt != nil {
		if cerr := q.listAssetsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAssetsStmt: %w", cerr)
		}
	}
	if q.listTransactionsStmt != nil {
		if cerr := q.listTransactionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTransactionsStmt: %w", cerr)
		}
	}
	if q.monthlySpendingSummaryStmt != nil {
		if cerr := q.monthlySpendingSummaryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing monthlySpendingSummaryStmt: %w", cerr)
		}
	}
	if q.topExpenseCategoriesStmt != nil {
		if cerr := q.topExpenseCategoriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing topExpenseCategoriesStmt: %w", cerr)
		}
	}
	if q.updateAssetValueStmt != nil {
		if cerr := q.updateAssetValueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAssetValueStmt: %w", cerr)
		}
	}
	if q.updateAssetValueAndHistoryStmt != nil {
		if cerr := q.updateAssetValueAndHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAssetValueAndHistoryStmt: %w", cerr)
		}
	}
	if q.updateTransactionStmt != nil {
		if cerr := q.updateTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTransactionStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                             DBTX
	tx                             *sql.Tx
	createAssetStmt                *sql.Stmt
	createAssetHistoryStmt         *sql.Stmt
	createTransactionStmt          *sql.Stmt
	dailySpendingStmt              *sql.Stmt
	deleteAssetStmt                *sql.Stmt
	deleteTransactionStmt          *sql.Stmt
	getAssetStmt                   *sql.Stmt
	getAssetByInstitutionStmt      *sql.Stmt
	getAssetHistoryStmt            *sql.Stmt
	getTransactionStmt             *sql.Stmt
	listAssetsStmt                 *sql.Stmt
	listTransactionsStmt           *sql.Stmt
	monthlySpendingSummaryStmt     *sql.Stmt
	topExpenseCategoriesStmt       *sql.Stmt
	updateAssetValueStmt           *sql.Stmt
	updateAssetValueAndHistoryStmt *sql.Stmt
	updateTransactionStmt          *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                             tx,
		tx:                             tx,
		createAssetStmt:                q.createAssetStmt,
		createAssetHistoryStmt:         q.createAssetHistoryStmt,
		createTransactionStmt:          q.createTransactionStmt,
		dailySpendingStmt:              q.dailySpendingStmt,
		deleteAssetStmt:                q.deleteAssetStmt,
		deleteTransactionStmt:          q.deleteTransactionStmt,
		getAssetStmt:                   q.getAssetStmt,
		getAssetByInstitutionStmt:      q.getAssetByInstitutionStmt,
		getAssetHistoryStmt:            q.getAssetHistoryStmt,
		getTransactionStmt:             q.getTransactionStmt,
		listAssetsStmt:                 q.listAssetsStmt,
		listTransactionsStmt:           q.listTransactionsStmt,
		monthlySpendingSummaryStmt:     q.monthlySpendingSummaryStmt,
		topExpenseCategoriesStmt:       q.topExpenseCategoriesStmt,
		updateAssetValueStmt:           q.updateAssetValueStmt,
		updateAssetValueAndHistoryStmt: q.updateAssetValueAndHistoryStmt,
		updateTransactionStmt:          q.updateTransactionStmt,
	}
}
