// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package db

import (
	"context"
	"time"
)

const createTransaction = `-- name: CreateTransaction :many
INSERT INTO transactions (created_at, transaction_date, amount, currency, category, description, mode, confirm)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, created_at, transaction_date, currency, amount, category, mode, description, confirm
`

type CreateTransactionParams struct {
	CreatedAt       time.Time `json:"created_at"`
	TransactionDate time.Time `json:"transaction_date"`
	Amount          float64   `json:"amount"`
	Currency        string    `json:"currency"`
	Category        string    `json:"category"`
	Description     string    `json:"description"`
	Mode            string    `json:"mode"`
	Confirm         bool      `json:"confirm"`
}

// Inserts a new transaction into the database.
func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) ([]Transaction, error) {
	rows, err := q.query(ctx, q.createTransactionStmt, createTransaction,
		arg.CreatedAt,
		arg.TransactionDate,
		arg.Amount,
		arg.Currency,
		arg.Category,
		arg.Description,
		arg.Mode,
		arg.Confirm,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.TransactionDate,
			&i.Currency,
			&i.Amount,
			&i.Category,
			&i.Mode,
			&i.Description,
			&i.Confirm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions WHERE id = ?
`

// Deletes a transaction by ID.
func (q *Queries) DeleteTransaction(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteTransactionStmt, deleteTransaction, id)
	return err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, created_at, transaction_date, currency, amount, category, mode, description, confirm FROM transactions WHERE id = ?
`

// Retrieves a single transaction by ID.
func (q *Queries) GetTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.queryRow(ctx, q.getTransactionStmt, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.TransactionDate,
		&i.Currency,
		&i.Amount,
		&i.Category,
		&i.Mode,
		&i.Description,
		&i.Confirm,
	)
	return i, err
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, created_at, transaction_date, currency, amount, category, mode, description, confirm FROM transactions ORDER BY created_at DESC
`

// Retrieves all transactions from the database. Confirm value is either true or false.
func (q *Queries) ListTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.query(ctx, q.listTransactionsStmt, listTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.TransactionDate,
			&i.Currency,
			&i.Amount,
			&i.Category,
			&i.Mode,
			&i.Description,
			&i.Confirm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionsByConfirm = `-- name: ListTransactionsByConfirm :many
SELECT id, created_at, transaction_date, currency, amount, category, mode, description, confirm FROM transactions WHERE confirm=? ORDER BY created_at DESC
`

// Retrieves all transactions from the database. Confirm value is either true or false.
func (q *Queries) ListTransactionsByConfirm(ctx context.Context, confirm bool) ([]Transaction, error) {
	rows, err := q.query(ctx, q.listTransactionsByConfirmStmt, listTransactionsByConfirm, confirm)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.TransactionDate,
			&i.Currency,
			&i.Amount,
			&i.Category,
			&i.Mode,
			&i.Description,
			&i.Confirm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :exec
UPDATE transactions
SET amount = ?, currency = ?, category = ?, description = ?, mode = ?, confirm = ?, transaction_date = ?
WHERE id = ?
`

type UpdateTransactionParams struct {
	Amount          float64   `json:"amount"`
	Currency        string    `json:"currency"`
	Category        string    `json:"category"`
	Description     string    `json:"description"`
	Mode            string    `json:"mode"`
	Confirm         bool      `json:"confirm"`
	TransactionDate time.Time `json:"transaction_date"`
	ID              int64     `json:"id"`
}

// Updates a transaction by ID.
func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) error {
	_, err := q.exec(ctx, q.updateTransactionStmt, updateTransaction,
		arg.Amount,
		arg.Currency,
		arg.Category,
		arg.Description,
		arg.Mode,
		arg.Confirm,
		arg.TransactionDate,
		arg.ID,
	)
	return err
}
