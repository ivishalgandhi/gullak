// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createTransaction = `-- name: CreateTransaction :exec
INSERT INTO transactions (created_at, amount, currency, category, description, mode)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateTransactionParams struct {
	CreatedAt   time.Time      `json:"created_at"`
	Amount      float64        `json:"amount"`
	Currency    string         `json:"currency"`
	Category    string         `json:"category"`
	Description sql.NullString `json:"description"`
	Mode        string         `json:"mode"`
}

// Inserts a new transaction into the database.
func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) error {
	_, err := q.db.ExecContext(ctx, createTransaction,
		arg.CreatedAt,
		arg.Amount,
		arg.Currency,
		arg.Category,
		arg.Description,
		arg.Mode,
	)
	return err
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, created_at, currency, amount, category, mode, description FROM transactions
`

// Retrieves all transactions from the database.
func (q *Queries) ListTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Currency,
			&i.Amount,
			&i.Category,
			&i.Mode,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
